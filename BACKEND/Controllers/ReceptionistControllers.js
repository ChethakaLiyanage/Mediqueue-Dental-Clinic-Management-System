// Controllers/ReceptionistControllers.js
// Example-style CRUD for Receptionist (list / insert / getById / update / delete)
const Receptionist = require("../Model/ReceptionistModel");

// DISPLAY (READ): get all receptionists
const getAllReceptionists = async (req, res, next) => {
  let receptionists;
  try {
    receptionists = await Receptionist
      .find()
      .populate("userId", "name email role");
  } catch (err) {
    console.log(err);
  }
  if (!receptionists) {
    return res.status(404).json({ message: "Receptionists not found" });
  }
  return res.status(200).json({ receptionists });
};

// INSERT (CREATE): add receptionist (receptionistCode auto via pre('save'))
const addReceptionists = async (req, res, next) => {
  const { userId, deskNo } = req.body;
  let receptionist;
  try {
    receptionist = new Receptionist({
      userId,
      deskNo
      // receptionistCode will be auto-generated by the model
    });
    await receptionist.save();
  } catch (err) {
    console.log(err);
    if (err?.code === 11000) {
      // handle unique violations (receptionistCode or any unique field you add later)
      const field = Object.keys(err.keyPattern || {})[0] || "unique field";
      return res.status(409).json({ message: `Duplicate ${field}` });
    }
  }
  if (!receptionist) {
    return res.status(404).json({ message: "Unable to add receptionist" });
  }
  return res.status(200).json({ receptionist });
};

// DISPLAY (READ): receptionist by id
const getById = async (req, res, next) => {
  const id = req.params.id;
  let receptionist;
  try {
    receptionist = await Receptionist
      .findById(id)
      .populate("userId", "name email role");
  } catch (err) {
    console.log(err);
  }
  if (!receptionist) {
    return res.status(404).json({ message: "Receptionist not found" });
  }
  return res.status(200).json({ receptionist });
};

// OPTIONAL DISPLAY (READ): receptionist by receptionistCode
const getByCode = async (req, res, next) => {
  const code = req.params.code;
  let receptionist;
  try {
    receptionist = await Receptionist
      .findOne({ receptionistCode: code })
      .populate("userId", "name email role");
  } catch (err) {
    console.log(err);
  }
  if (!receptionist) {
    return res.status(404).json({ message: "Receptionist not found" });
  }
  return res.status(200).json({ receptionist });
};

// UPDATE: update receptionist (we don't change receptionistCode here)
const updateReceptionist = async (req, res, next) => {
  const id = req.params.id;
  const { userId, deskNo } = req.body;
  let receptionist;
  try {
    receptionist = await Receptionist.findByIdAndUpdate(
      id,
      { userId, deskNo },
      { new: true }
    ).populate("userId", "name email role");
  } catch (err) {
    console.log(err);
    if (err?.code === 11000) {
      const field = Object.keys(err.keyPattern || {})[0] || "unique field";
      return res.status(409).json({ message: `Duplicate ${field}` });
    }
  }
  if (!receptionist) {
    return res.status(404).json({ message: "Unable to update receptionist" });
  }
  return res.status(200).json({ receptionist });
};

// DELETE: delete receptionist
const deleteReceptionist = async (req, res, next) => {
  const id = req.params.id;
  let receptionist;
  try {
    receptionist = await Receptionist.findByIdAndDelete(id);
  } catch (err) {
    console.log(err);
  }
  if (!receptionist) {
    return res.status(404).json({ message: "Unable to delete receptionist" });
  }
  return res.status(200).json({ receptionist });
};

exports.getAllReceptionists = getAllReceptionists;
exports.addReceptionists = addReceptionists;
exports.getById = getById;
exports.getByCode = getByCode;          // optional lookup by receptionistCode
exports.updateReceptionist = updateReceptionist;
exports.deleteReceptionist = deleteReceptionist;
